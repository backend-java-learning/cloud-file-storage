services:
  backend:
    build:
      context: .
    container_name: backend
    expose:
      - "8080"      # доступен только во внутренних сетях
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_URL=${DB_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_URL=${MINIO_URL}
      - MINIO_BUCKET=${MINIO_BUCKET}
    depends_on:
        - postgres
        - redis
        - minio
    networks:
      - frontend_net
      - backend_net

  frontend:
    build:
     context: ../cloud-storage-frontend
    container_name: frontend
    ports:
      - "8080:80"   # наружу доступен только фронт
    depends_on:
      - backend
    networks:
      - frontend_net

  postgres:
    image: postgres
    container_name: postgres
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend_net

  minio:
    container_name: minio
    image: minio/minio:latest
    volumes:
      - minio-storage:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - minio_network
      - backend_net
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data/ --console-address :9001
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    container_name: redis
    image: redis
    ports:
        - "6379:6379"
    volumes:
      - redis-data:/data
    command: [ "redis-server", "--appendonly", "yes" ]
    networks:
      - backend_net

networks:
  minio_network:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge

volumes:
  db-data:
  minio-storage:
  redis-data: